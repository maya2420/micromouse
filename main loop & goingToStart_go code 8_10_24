
//------------------------------------------------main loop code


if( xpos == goalX && ypos == goalY){
  moveCount = dis;
  for (int d = 0; d < moveCount; d++) { // needs to be the movecount so whenever you give a block a single digit number make it movecount equal it
    find();
    whereTo();
  } 
 
  for (int i = 0; i < moveCount; i++){
    turnToDirections();
  }
  
  goToStart();
  }


  if(pathFound){
    go();
  } 

}


//-----------------------------------------------------Start of Maya's tracing code



void find(){
    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 5; j++) {
            if (maze[i][j] == countPos) {
                countPos++;
                cX = i;
                cY = j;
                return;
            }
        }
    }
}

void whereTo() {

    if (oX > cX) {
        virdir = 3;
    }

    if (oX < cX) {
        virdir = 1;
    }

    if (oY > cY) {
        virdir = 2;
    }

    if (oY < cY) {
        virdir = 4;
    }

    oX = cX;
    oY = cY;
    vals[CountW] = virdir;
    valsSize++;
    CountW++;

}

void turnToDirections(){
    
    if (vals[c] == vals[f]) {
        block++;
        
    }
    else if (vals[c] == 1 && vals[f] == 4) {
        turn = false;
        turnList[x] = turn;
        distList[x] = (block * 764) - 340;
        block = 1;
        
       
    }
    else if (vals[c] == 4 && vals[f] == 1) {
        turn = true;
        turnList[x] = turn;
        distList[x] = (block * 764) - 340;
        block = 1;
        
        
    }
    else if (vals[c] != 4 && vals[c] < vals[f]) {
        turn = true;
        turnList[x] = turn;
        distList[x] = (block * 764) - 340;
        block = 1;
        
    }
    else {
        turn = false;
        turnList[x] = turn;
        distList[x] = (block * 764) - 340;
        block = 1;
        
    }

    c++;
    f++;
    x++;
    directionsSize++;
}

void go(){
  oneeightyRight();
  for(int i = 0; i<directionsSize; i++){
    if(distList[i] != 0){
      goStraight(distList[i]);

      if(turnList[i] == true){
        turnRight();
      }
      else if(turnList[i] == false){
        turnLeft();
      }
    }
  }
}


void goToStart(){
  oneeightyRight();
  for(int i = directionsSize; i>0; i--){
    if(distList[i] != 0){
      goStraight(distList[i]);

      if(turnList[i] == false){
        turnRight();
      }
      else if(turnList[i] == true){
        turnLeft();
      }
    }
  }
  pathFound = true;
}
